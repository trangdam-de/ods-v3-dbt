version: '3.8'

x-airflow-common: &airflow-common
  image: trang011202/ods_airflow:v1
  user: "${AIRFLOW_UID}:0"
  environment: &airflow-common-env
    TZ: Asia/Ho_Chi_Minh
    AIRFLOW_UID: 50000
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: MgdtI26GnulyH-t7PuXGkvzhp5kkFo09rlhPscvNleQ=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__TEST_CONNECTION: "Enabled"
    AIRFLOW__CORE__DEFAULT_TIMEZONE: Asia/Ho_Chi_Minh
    AIRFLOW__CORE__LAZY_LOAD_PLUGINS: 'false'
    AIRFLOW__LOGGING__REMOTE_LOGGING: 'true'
    AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: 's3://logs/logs'
    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: 'minio_conn_id'
    AIRFLOW__LOGGING__ENCRYPT_S3_LOGS: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__SHOW_TRIGGER_FORM_IF_NO_PARAMS: 'true'
    _AIRFLOW_DB_MIGRATE: "true"
    _AIRFLOW_WWW_USER_CREATE: "true"
    _AIRFLOW_WWW_USER_USERNAME: airflow
    _AIRFLOW_WWW_USER_PASSWORD: airflow
  volumes:
    - /mnt/airflow/dags:/opt/airflow/dags
    - /mnt/airflow/logs:/opt/airflow/logs
    - /mnt/airflow/configs:/opt/airflow/configs
    - /mnt/airflow/plugins:/opt/airflow/plugins
    - /mnt/airflow/helper1:/opt/airflow/helper1
    - /mnt/airflow/soda:/opt/airflow/soda
    - /mnt/airflow/pipeline_params:/opt/airflow/pipeline_params
    - /mnt/airflow/temp:/opt/airflow/temp
    - /mnt/airflow/dbt:/opt/airflow/dbt

services:
  postgres:
    image: postgres:15
    deploy:
      placement:
        constraints:
          - node.labels.type == primary
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - ods_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7.2-bookworm
    deploy:
      placement:
        constraints:
          - node.labels.type == primary
      resources: # ? Thêm resource limit
        limits:
          cpus: '1.0'
          memory: 1G
    networks:
      - ods_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    deploy:
      placement:
        constraints:
          - node.labels.type == primary
      resources:
        limits:
          cpus: '3.0'
          memory: 4G
    ports:
      - "8793:8793"
    networks:
      - ods_network
    restart: always
    depends_on:
      - redis
      - postgres
      - airflow-init

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    deploy:
      placement:
        constraints:
          - node.labels.type == primary
      resources:
        limits:
          cpus: '3.0'
          memory: 3.0G
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 300s
    restart: always
    networks:
      - ods_network
    depends_on:
      - redis
      - postgres
      - airflow-init
  airflow-worker-1:
    <<: *airflow-common
    command: celery worker
    deploy:
      replicas: 1 
      placement:
        constraints:
          - node.labels.type == primary
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    networks:
      - ods_network
    depends_on:
      - redis
      - postgres
      - airflow-init


  airflow-worker-2:
    <<: *airflow-common
    command: celery worker
    deploy:
      replicas: 1  # ? Tang m?nh replicas d? t?n d?ng máy worker
      placement:
        constraints:
          - node.labels.type == worker
#    healthcheck:
 #     test:
  #      - "CMD-SHELL"
   #     - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
    #  interval: 30s
     # timeout: 20s
     # retries: 5
     # start_period: 300s    
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    networks:
      - ods_network
    depends_on:
      - redis
      - postgres
      - airflow-init

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    deploy:
      placement:
        constraints:
          - node.labels.type == primary
      resources:
        limits:
          cpus: '3.0'
          memory: 3G
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 300s
    restart: always
    networks:
      - ods_network
    depends_on:
      - redis
      - postgres
      - airflow-init

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/env
        if ! /entrypoint airflow db check; then
          /entrypoint airflow db migrate
        fi
        [ -f /sources/env/variables.json ] && su airflow -c "airflow variables import /sources/env/variables.json"
        [ -f /sources/env/connections.json ] && su airflow -c "airflow connections import --overwrite /sources/env/connections.json"
        exit 0
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == primary
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - ods_network
    volumes:
      - /mnt/airflow:/sources
    depends_on:
      - redis
      - postgres

  minio:
    image: minio/minio:RELEASE.2024-11-07T00-52-20Z
    deploy:
      placement:
        constraints:
          - node.labels.type == primary
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - ods_network

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.8.2
    deploy:
      placement:
        constraints:
          - node.labels.type == primary
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - DBT_PROFILES_DIR=/root/.dbt
      - DBT_PROJECT_DIR=/usr/app/dbt
    volumes:
      - /mnt/airflow/dbt:/usr/app/dbt
      - /mnt/airflow/dbt/profiles:/root/.dbt
      - /mnt/airflow/logs:/usr/app/logs
    networks:
      - ods_network
    depends_on:
      - postgres
    command: ["tail", "-f", "/dev/null"]  # Keep container running for dbt commands
    restart: always

networks:
  ods_network:
    driver: overlay
    attachable: true

volumes:
  pgdata:
  minio_data:
